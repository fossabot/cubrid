/*
 * Copyright (C) 2008 Search Solution Corporation
 * Copyright (C) 2016 CUBRID Corporation
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met: 
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *   this list of conditions and the following disclaimer. 
 *
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution. 
 *
 * - Neither the name of the <ORGANIZATION> nor the names of its contributors 
 *   may be used to endorse or promote products derived from this software without 
 *   specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 * OF SUCH DAMAGE. 
 *
 */

package cubrid.jdbc.driver;

import java.sql.ResultSet;
import java.sql.SQLException;

import cubrid.jdbc.jci.CUBRIDCommandType;
import cubrid.jdbc.jci.UErrorCode;
import cubrid.jdbc.jci.UShardInfo;
import cubrid.jdbc.jci.UStatement;

/**
 * @author hgryoo
 *
 */
public class CUBRIDServerSidePreparedStatement extends CUBRIDPreparedStatement {
	
	protected CUBRIDServerSidePreparedStatement(CUBRIDConnection c, UStatement us, int t,
			int concur, int hold, int autoGeneratedKeys) {
		super(c, us, t, concur, hold, autoGeneratedKeys);
	}
	
	@Override
	public void close() throws SQLException {
		try {
			synchronized (con) {
				synchronized (this) {
	    			setShardId(UShardInfo.SHARD_ID_INVALID);
					if (is_closed)
						return;
					
					complete();
					is_closed = true;
					con.removeStatement(this);
					
					/* remove reference */
					con = null;
					u_con = null;
					error = null;
				}
			}
		} catch (NullPointerException e) {
		}
	}
	
	@Override
	public ResultSet executeQuery() throws SQLException {
		try {
			synchronized (con) {
				synchronized (this) {
				  	long begin = 0;

				   	u_con.setBeginTime();
					if (u_con.getLogSlowQuery()) {
				   		begin = System.currentTimeMillis();
				  	}

					checkIsOpen();
					if (!completed) {
						complete();
					}
					checkIsOpen();
					if ((!first_result_type)
							&& (u_stmt.getCommandType() != CUBRIDCommandType.CUBRID_STMT_CALL_SP)) {
						throw con.createCUBRIDException(CUBRIDJDBCErrorCode.invalid_query_type_for_executeQuery, null);
					}
					executeCore(false);
					getMoreResults();
					if (current_result_set != null)
						((CUBRIDServerSideResultSet) current_result_set).completeOnClose = true;
					if (u_con.getLogSlowQuery()) {
					    	long end = System.currentTimeMillis();
						u_con.logSlowQuery(begin, end, u_stmt.getQuery(), u_stmt.getBindParameter());
					}
					return current_result_set;
				}
			}
		} catch (NullPointerException e) {
		    	throw new CUBRIDException(CUBRIDJDBCErrorCode.prepared_statement_closed);
		}
	}
	
	public boolean getMoreResults() throws SQLException {
		try {
			checkIsOpen();

			synchronized (con) {
				synchronized (this) {
					checkIsOpen();

					if (current_result_set != null) {
						current_result_set.close();
						current_result_set = null;
					}

					if (completed) {
						update_count = -1;
						return false;
					}

					if (result_index == result_info.length) {
						if (u_stmt.getCommandType() != CUBRIDCommandType.CUBRID_STMT_CALL_SP)
							complete();
						update_count = -1;
						return false;
					}

					if (result_index != 0) {
						u_stmt.nextResult();
						error = u_stmt.getRecentError();
						switch (error.getErrorCode()) {
						case UErrorCode.ER_NO_ERROR:
							break;
						default:
							throw con.createCUBRIDException(error);
						}
					}

					boolean result_type = result_info[result_index]
							.isResultSet();

					if (result_type) {
						int rs_type = type;
						int rs_concurrency = concurrency;
						if (type == ResultSet.TYPE_SCROLL_SENSITIVE
								&& u_stmt.isOIDIncluded() == false)
							rs_type = ResultSet.TYPE_SCROLL_INSENSITIVE;
						if (concurrency == ResultSet.CONCUR_UPDATABLE
								&& u_stmt.isOIDIncluded() == false)
							rs_concurrency = ResultSet.CONCUR_READ_ONLY;
						current_result_set = new CUBRIDServerSideResultSet(con, this,
								rs_type, rs_concurrency, is_holdable);
						update_count = -1;
					} else {
						update_count = result_info[result_index]
								.getResultCount();
					}

					result_index++;
					return result_type;
				}
			}
		} catch (NullPointerException e) {
			throw con.createCUBRIDException(CUBRIDJDBCErrorCode.statement_closed, e);
		}
	}
}
